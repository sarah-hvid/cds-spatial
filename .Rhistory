primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
View(rf)
View(rf)
rf <- rf %>% drop_na(rf, rf$Latitude)
rf <- rf %>% drop_na(rf$Latitude)
rf <- rf %>% drop_na(Latitude)
rf <- rf %>% drop_na(Longitude)
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description,
"<br><strong>Notes: </strong>",places$Notes))
"<br><strong>Description: </strong>",rf$Description)
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.4559073, -33.6175635, zoom = 12)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
View(rf)
View(rf)
View(rf)
View(rf)
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.73, zoom = 12)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.73, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(151.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -34.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -34.73, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.63, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.63, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.65, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.66, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.69, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.75, zoom = 12) %>%
addTiles()  # checking I am in the right area
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.75, zoom = 13)
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.75, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.75, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
View(rf)
View(rf)
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description),
clusterOptions = markerClusterOptions())
rf <- read_csv('C:/Users/Sarah/Desktop/R_21/spatial/cds-spatial_fork/Week01/data/RCFeature2018.csv')
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
tinytex::install_tinytex()
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
pacman::p_load(tidyverse, leaflet, htmlwidgets)
rf <- read_csv('C:/Users/Sarah/Desktop/R_21/spatial/cds-spatial_fork/Week01/data/RCFeature2018.csv')
rf <- rf %>% drop_na(Latitude)
rf <- rf %>% drop_na(Longitude)
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.75, zoom = 12) %>%
addTiles()  # checking I am in the right area
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.75, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
pacman::p_load(sf)
# Read in the forests shapefile
forests <- ___("../data/forests.shp")
# Read in the forests shapefile
forests <- st_read("../data/forests.shp")
setwd("C:/Users/Sarah/Desktop/R_21/spatial/cds-spatial_fork/Week02")
# Read in the forests shapefile
forests <- st_read("../data/forests.shp")
?st_read()
View(forests)
# Read in the parks shapefile
parks <- st_read("../data/forests.shp")
# Read in the playgrounds shapefile
playgrounds <- st_read("../data/forests.shp")
# Read in the shelters json
shelters <- st_read("../data/forests.shp")
View(parks)
pacman::p_load(sf, raster, rgdal)
pacman::p_load(sf, raster, rgdal, tidyverse)
glimpse(forests)
head(playgrounds)
head(forests)
head(parks)
head(shelters)
head(playgrounds)
playgrounds
View(playgrounds)
head(playgrounds)
playgrounds
forests
parks
View(parks)
parks_5 <- parks %>% filter(areal_m2 >= 50.000)
View(parks_5)
parks_5 <- parks %>% filter(areal_m2 >= 50000)
# Count the number of rows
nrow(parks_5)
parks_5_2col <- parks_5 %>% select(navn, areal_m2)
parks_5_2col <- parks_5 %>% tidyverse::select(navn, areal_m2)
pacman::p_load(sf, raster, rgdal, tidyverse, dplyr)
parks_5_2col <- parks_5 %>% dplyr::select(navn, areal_m2)
# Use head() to look at the first few records
head(parks_5_2col)
# Create a standard, non-spatial data frame with one column
df <- dta.frame(a = 1:3)
# Create a standard, non-spatial data frame with one column
df <- data.frame(a = 1:3)
View(df)
# Add a list column to your data frame
df$b <- list(1:4, 1:5, 1:10)
View(df)
# Look at your data frame with head
head(df)
# Convert your data frame to a tibble and print on console
df <- as_tibble(df)
df
# Look at your data frame with head
head(df)
# Pull out the third observation from both columns individually
df$b[2]
# Pull out the third observation from both columns individually
df$b[2]
# Pull out the third observation from both columns individually
df$b[[2]
# Pull out the third observation from both columns individually
df$b[[2]]
# Pull out the third observation from both columns individually
df$b[[2]]
# Pull out the third observation from both columns individually
df$b[[[2]]]
# Pull out the third observation from both columns individually
df$b[[2]]
# Pull out the third observation from both columns individually
df$b[[1]]
# Pull out the third observation from both columns individually
df$b[[1]][2]
# Pull out the third observation from both columns individually
df$b[[1]][3]
df$a[3]
# Pull out the third observation from both columns individually
df$b[[3]][3]
# Pull out the third observation from both columns individually
df$b[[3]]#[3]
# This will work
val <- 100000
which(unclass(result) > 100000)
# This will not work
result <- st_area(parks)
result > 100000
which(unclass(result) > 100000)
# This will work
units(val) <- units(result)
which(result > val)
length(which(result > val))
areas <- st_area(forests)
areas
View(forests)
View(forests[[16]][[32]])
hist(areas)
big_forests <- forests %>% filter(unclass(areas) > 200000)
View(big_forests)
plot(big_forests)
plot_st(big_forests)
plot_sf(big_forests)
plot_sf(big_forests$geometry)
plot(st_geometry(big_forests))
plot(st_geometry(big_forests), border = 'grey')
plot(st_geometry(big_forests), border = 'black')
plot(big_forests['navn'])
ggplot() + geom_sf(data = big_forests)
ggplot() + geom_sf(data = forests)
ggplot() +
geom_sf(data = big_forests, aes(fill = navn))
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
ggplot() +
geom_sf(data = big_forests, aes(fill = navn))
# Plot the forests object using all defaults
plot(forests)
# Plot just the areal_m2 attribute of the forests data
plot(forests["areal_m2"])
# Create a new object of just the forests geometry
forests_geo <- st_geometry(forests)
# Plot the geometry of the forests data
plot(forests_geo)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue"); plot(parks$geometry, col = "red", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
plot(parks$geometry, col = "red", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue")
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
View(parks)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "green");plot(parks$geometry, col = "pink", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "green");plot(parks$geometry, col = "pink", add = T)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "green");plot(parks$geometry, col = "pink")
parks_geo <- st_geometry(parks)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "green");plot(parks_geo, col = "pink", add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests$geometry, col = "green")
plot(parks$geometry, col = "pink", add = TRUE)
plot(forests$geometry, col = "green")
plot(parks$geometry, col = "pink", add = TRUE)
pacman::p_load(sf, raster, rgdal, tidyverse, dplyr)
