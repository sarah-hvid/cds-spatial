function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
addControl("", position = "topright")
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
l_aus <- leaflet() %>%   # assign the base location to an object
setView(151.2339084, -33.85089, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
AUSmap
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
AUSmap
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
AUSmap
l_dk <- leaflet() %>%   # assign the base location to an object
setView(11, 56, zoom = 7)
#l_dk %>% addTiles()
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# l_dk
# Create the map
MapDK <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")%>%
addControl("", position = "topright")
MapDK
library(tidyverse)
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
glimpse(places)
places %>% filter(!is.na(Longitude))
places <- places %>% filter(!is.na(Longitude))
leaflet() %>%
addTiles() %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
places <- places %>% filter(!is.na(Longitude))
gs4_oauth_app()
gs4_auth_configure()
gs4_token()
gs4_auth_configure()
gs4_has_token()
places <- places %>% filter(!is.na(Longitude) && !is.na(Latitude))
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
pacman::p_load(tidyverse)
install.packages('pacman')
install.packages('tidyverse')
pacman::p_load(tidyverse)
pacman::p_load(tidyverse, here)
?here
read_csv('\data\RCFeature2018.csv')
read_csv('/data/RCFeature2018.csv')
read_csv('Week01/data/RCFeature2018.csv')
rf <- read_csv('Week01/data/RCFeature2018.csv')
View(rf)
View(rf)
pacman::p_load(tidyverse, leaflet)
# Set the location and zoom level
leaflet() %>%
setView(-33.6175635, 150.4559073 zoom = 6.5) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(-33.6175635, 150.4559073, zoom = 6.5) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(-33.6175635, 150.4559073, zoom = 1) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(-33.6175635, 150.4559073, zoom = 3) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 3) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 6) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 7) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 8) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 11) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.4559073, -33.6175635, zoom = 6.5)
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.4559073, -33.6175635, zoom = 10)
esri <- grep("^Esri", providers, value = TRUE)
?providers
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
View(rf)
View(rf)
rf <- rf %>% drop_na(rf, rf$Latitude)
rf <- rf %>% drop_na(rf$Latitude)
rf <- rf %>% drop_na(Latitude)
rf <- rf %>% drop_na(Longitude)
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description,
"<br><strong>Notes: </strong>",places$Notes))
"<br><strong>Description: </strong>",rf$Description)
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.4559073, -33.6175635, zoom = 12)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
View(rf)
View(rf)
View(rf)
View(rf)
# Set the location and zoom level
leaflet() %>%
setView(150.4559073, -33.6175635, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.73, zoom = 12)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.73, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
# Set the location and zoom level
leaflet() %>%
setView(151.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -34.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -34.73, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.63, zoom = 10) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.63, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.65, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.66, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.69, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.73, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.75, zoom = 12) %>%
addTiles()  # checking I am in the right area
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.75, zoom = 13)
# Set the location and zoom level
leaflet() %>%
setView(150.3, -33.75, zoom = 12) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_bm <- leaflet() %>%   # assign the base location to an object
setView(150.3, -33.75, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_bm <- l_bm %>% addProviderTiles(provider, group = provider)
}
BMmap <- l_bm %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
BMmap
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
View(rf)
View(rf)
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description),
clusterOptions = markerClusterOptions())
rf <- read_csv('C:/Users/Sarah/Desktop/R_21/spatial/cds-spatial_fork/Week01/data/RCFeature2018.csv')
BMmap %>% addCircleMarkers(lng = rf$Longitude,
lat = rf$Latitude,
radius = rf$Accuracy,
popup = paste(
"<br><strong>FeatureID: </strong>", rf$FeatureID,
"<br><strong>FeatureType: </strong>",rf$FeatureType,
"<br><strong>Description: </strong>",rf$Description))
